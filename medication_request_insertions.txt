curl --location 'http://20.184.8.188:8080/fhir/MedicationRequest' --header 'Content-Type: application/fhir+json' --data '{
  "resourceType": "MedicationRequest",
  "status": "active",
  "intent": "order",
  "medicationCodeableConcept": {
    "text": "Amoxicillin"
  },
  "subject": {
    "reference": "Patient/1"
  },
  "authoredOn": "2025-05-05",
  "requester": {
    "reference": "Practitioner/260",
    "display": "Dr. Adams"
  },
  "dispenseRequest": {
    "validityPeriod": {
      "start": "2025-05-05",
      "end": "2025-05-12"
    }
  },
  "note": [
    {
      "text": "Overlap"
    }
  ]
}'



package com.wipro.fhir.adopter.service;

import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.MedicationRequest;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.Practitioner;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.wipro.fhir.adopter.dto.ActiveMedicationsResponseDTO;
import com.wipro.fhir.adopter.dto.MedicationDTO;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.rest.client.api.IGenericClient;

@Service
public class FhirMedicationService {

    @Value("${fhir.server.url}")
    private String fhirServerUrl;

    public ActiveMedicationsResponseDTO getActiveMedications(String patientId) {
        FhirContext ctx = FhirContext.forR4();
        IGenericClient client = ctx.newRestfulGenericClient(fhirServerUrl);

        Bundle bundle = client
                .search()
                .forResource(MedicationRequest.class)
                .where(MedicationRequest.SUBJECT.hasId("Patient/" + patientId))
                .returnBundle(Bundle.class)
                .execute();

        List<MedicationDTO> medicationList = new ArrayList<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        for (Bundle.BundleEntryComponent entry : bundle.getEntry()) {
            MedicationRequest request = (MedicationRequest) entry.getResource();
            MedicationDTO dto = new MedicationDTO();

            if (request.hasMedicationCodeableConcept() && request.getMedicationCodeableConcept().hasText()) {
                dto.name = request.getMedicationCodeableConcept().getText();
            } else {
                continue; // skip entries without name
            }

            if (request.hasStatus()) {
                dto.status = request.getStatus().toCode().toUpperCase();
            }

            if (request.hasAuthoredOn()) {
                dto.startDate = formatter.format(
                        request.getAuthoredOn().toInstant().atZone(ZoneId.systemDefault()));
            }

            if (request.hasDispenseRequest() && request.getDispenseRequest().hasValidityPeriod()) {
                Period period = request.getDispenseRequest().getValidityPeriod();
                if (period.hasEnd()) {
                    dto.endDate = formatter.format(
                            period.getEnd().toInstant().atZone(ZoneId.systemDefault()));
                }
            }

            dto.lastGiven = dto.endDate != null ? dto.endDate : dto.startDate;

            if (request.hasRequester() && request.getRequester().hasReference()) {
                try {
                    String practitionerId = request.getRequester().getReference().split("/")[1];
                    Practitioner practitioner = client.read()
                            .resource(Practitioner.class)
                            .withId(practitionerId)
                            .execute();

                    if (practitioner.hasName()) {
                        dto.prescribedBy = practitioner.getNameFirstRep().getText();
                    }
                } catch (Exception e) {
                    // skip if practitioner not found
                }
            }

            if (request.hasNote() && !request.getNote().isEmpty()) {
                dto.notes = request.getNote().get(0).getText();
            }

            medicationList.add(dto);
        }

        ActiveMedicationsResponseDTO response = new ActiveMedicationsResponseDTO();
        response.patientId = patientId;
        response.medications = medicationList;
        return response;
    }
}
