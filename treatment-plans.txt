package com.example.livevitals;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.eclipse.paho.client.mqttv3.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Sinks;

import javax.annotation.PostConstruct;
import java.time.Instant;
import java.util.concurrent.atomic.AtomicBoolean;

@RestController
@RequestMapping("/api/patient")
public class LiveVitalsController {

    private final LiveVitalsService liveVitalsService;

    public LiveVitalsController(LiveVitalsService liveVitalsService) {
        this.liveVitalsService = liveVitalsService;
    }

    @GetMapping(value = "/{patientId}/live-vitals", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    public Flux<LiveVitalsResponse> getLiveVitals(@PathVariable int patientId) {
        return liveVitalsService.getVitalsStream(patientId);
    }
}

@Service
class LiveVitalsService {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final Sinks.Many<LiveVitalsResponse> sink = Sinks.many().multicast().onBackpressureBuffer();
    private final AtomicBoolean subscribed = new AtomicBoolean(false);

    @Value("${mqtt.broker.url}")
    private String brokerUrl;

    @PostConstruct
    public void subscribeToMqtt() throws MqttException {
        if (subscribed.compareAndSet(false, true)) {
            MqttClient client = new MqttClient(brokerUrl, MqttClient.generateClientId());
            client.connect();
            client.subscribe("sensor_data", (topic, msg) -> {
                String payload = new String(msg.getPayload());
                try {
                    JsonNode root = objectMapper.readTree(payload);
                    JsonNode data = root.path("data");

                    LiveVitalsResponse response = new LiveVitalsResponse();
                    response.setStatus("Success");
                    LiveVitalsResponse.Data vitals = new LiveVitalsResponse.Data();
                    vitals.setHeartRate(data.path("hr").asInt());
                    vitals.setPulseRate(data.path("pr").asInt());
                    vitals.setSpo2(data.path("spo2").asInt());
                    vitals.setTemperature(data.path("temp").asDouble());
                    vitals.setRespiratoryRate(data.path("rr").asInt());
                    vitals.setRecordedAt(Instant.now().toString());
                    response.setData(vitals);
                    sink.tryEmitNext(response);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
        }
    }

    public Flux<LiveVitalsResponse> getVitalsStream(int patientId) {
        return sink.asFlux();
    }
}

class LiveVitalsResponse {
    private String status;
    private Data data;

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Data getData() {
        return data;
    }

    public void setData(Data data) {
        this.data = data;
    }

    static class Data {
        private int heartRate;
        private int pulseRate;
        private int spo2;
        private double temperature;
        private int respiratoryRate;
        private String recordedAt;

        public int getHeartRate() {
            return heartRate;
        }

        public void setHeartRate(int heartRate) {
            this.heartRate = heartRate;
        }

        public int getPulseRate() {
            return pulseRate;
        }

        public void setPulseRate(int pulseRate) {
            this.pulseRate = pulseRate;
        }

        public int getSpo2() {
            return spo2;
        }

        public void setSpo2(int spo2) {
            this.spo2 = spo2;
        }

        public double getTemperature() {
            return temperature;
        }

        public void setTemperature(double temperature) {
            this.temperature = temperature;
        }

        public int getRespiratoryRate() {
            return respiratoryRate;
        }

        public void setRespiratoryRate(int respiratoryRate) {
            this.respiratoryRate = respiratoryRate;
        }

        public String getRecordedAt() {
            return recordedAt;
        }

        public void setRecordedAt(String recordedAt) {
            this.recordedAt = recordedAt;
        }
    }
}
